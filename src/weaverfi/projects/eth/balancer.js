// Imports:
import { minABI } from '../../ABIs';
import { WeaverError } from '../../error';
import { addBalancerToken } from '../../project-functions';
import { multicallOneMethodQuery, parseBN } from '../../functions';
// Initializations:
const chain = 'eth';
const project = 'balancer';
const pools = [
    '0x01abc00E86C7e258823b9a055Fd62cA6CF61a163',
    '0x021c343C6180f03cE9E48FaE3ff432309b9aF199',
    '0x0297e37f1873D2DAb4487Aa67cD56B58E2F27875',
    '0x03cD191F589d12b0582a99808cf19851E468E6B5',
    '0x06Df3b2bbB68adc8B0e302443692037ED9f91b42',
    '0x072f14B85ADd63488DDaD88f855Fda4A99d6aC9B',
    '0x09804CaEA2400035b18E2173fdD10EC8b670cA09',
    '0x0a9E96988E21c9A03B8DC011826A00259e02C46e',
    '0x0b09deA16768f0799065C475bE02919503cB2a35',
    '0x1050f901A307e7E71471CA3d12dfceA01d0a0A1c',
    '0x14462305D211C12A736986F4E8216E28c5EA7Ab4',
    '0x148CE9b50bE946a96e94A4f5479b771bAB9B1c59',
    '0x14Bf727F67Aa294ec36347BD95aBA1a2c136FE7a',
    '0x15432bA000e58E3c0aE52A5dEc0579215EBC75D0',
    '0x16faF9f73748013155B7bC116a3008b57332D1e6',
    '0x186084fF790C65088BA694Df11758faE4943EE9E',
    '0x1B46e4B0791C9383B73b64AaBc371360a031a83F',
    '0x22939E40Cf467DE8F5Db4F05A4027e5D4c1C658c',
    '0x231E687C9961d3A27e6E266Ac5C433Ce4F8253E4',
    '0x29d7a7E0d781C957696697B94D4Bc18C651e358E',
    '0x2D6e3515C8b47192Ca3913770fa741d3C4Dac354',
    '0x32296969Ef14EB0c6d29669C550D4a0449130230',
    '0x32FC95287b14eAeF3Afa92CCCC48C285eE3a280a',
    '0x344e8f99a55DA2ba6B4b5158df2143374E400DF2',
    '0x36128D5436d2d70cab39C9AF9CcE146C38554ff0',
    '0x38A01c45D86b61A70044fB2A76eAC8e75B1ac78E',
    '0x39Cd55FF7E7d7C66D7D2736f1d5D4791cDab895B',
    '0x3A19030Ed746bD1C3f2B0f996FF9479aF04C5F0A',
    '0x3a271A9838B36Ea8c42eAf230f969c6b40E4Ac04',
    '0x3A693EB97b500008d4Bb6258906f7Bbca1D09Cc5',
    '0x3e5FA9518eA95c3E533EB377C001702A9AaCAA32',
    '0x3ebf48cd7586d7A4521cE59E53D9a907EBf1480F',
    '0x3FEBe770201CF4d351D33708170B9202BA1C6Af7',
    '0x41175c3ee2Dd49FCa9b263F49525c069095b87C7',
    '0x45910fafF3cBf990FdB204682e93055506682d17',
    '0x4626d81b3a1711bEb79f4CEcFf2413886d461677',
    '0x494B26D4aEE801Cb1fabF498Ee24f0af20238743',
    '0x4dd7517dE8065A688dd0e398ed031B6e469f9F0F',
    '0x4E7f40cD37CEE710f5e87AD72959d30ef8a01A5D',
    '0x4FA6086ED10C971D255aa1B09a6beB1C7bE5ca37',
    '0x503717B3Dc137e230AFC7c772520D7974474fB70',
    '0x571046EaE58C783f29f95ADBa17Dd561Af8a8712',
    '0x58aF920D9Dc0bc4e8F771FF013D79215CabcaA9e',
    '0x59e2563c08029F13F80CBa9Eb610bfD0367eD266',
    '0x5Aa90c7362ea46b3cbFBD7F01EA5Ca69C98Fef1c',
    '0x5b1C06c4923DBBa4B27Cfa270FFB2E60Aa286159',
    '0x5c6Ee304399DBdB9C8Ef030aB642B10820DB8F56',
    '0x5D563Ca1E2daaAe3402c36097b934630AB53702c',
    '0x5d6e3d7632D6719e04cA162be652164Bec1EaA6b',
    '0x606e3CCC8C51cbbB1Ff07AD03c6F95a84672ab16',
    '0x60B4601cDdDc4467f31b1F770cb93c51dC7dC728',
    '0x614b5038611729ed49e0dED154d8A5d3AF9D1D9E',
    '0x61d5dc44849c9C87b0856a2a311536205C96c7FD',
    '0x647c1FD457b95b75D0972fF08FE01d7D7bda05dF',
    '0x6602315d19278278578830933aeaaC0d684c9C3f',
    '0x67F8FCb9D3c463da05DE1392EfDbB2A87F8599Ea',
    '0x6AE82385f76e3742f89cB46343B169f6ee49dE1b',
    '0x6De69beB66317557E65168BD7D3fff22a89dBb11',
    '0x71628c66C502F988Fbb9e17081F2bD14e361FAF4',
    '0x72Ab6fF76554f90532E2809Cee019ade724e029a',
    '0x787546Bf2c05e3e19e2b6BDE57A203da7f682efF',
    '0x7Bf521b4f4C1543A622e11eE347EFB1a23743322',
    '0x7EB878107Af0440F9E776f999CE053D277c8Aca8',
    '0x80bE0c303D8Ad2A280878b50a39B1ee8E54DBD22',
    '0x8339E311265A025Fd5792DB800daA8edA4264e2C',
    '0x85DCA8667D020e694FDfF06E7eE85e0c5C7C61a4',
    '0x87165B659Ba7746907a48763063efA3B323C2B07',
    '0x893B30574BF183d69413717f30b17062eC9DFD8b',
    '0x89EA4363Bd541d27d9811E4Df1209dAa73154472',
    '0x8a92c3afAbaB59101B4e2426C82a7ddBb66B5450',
    '0x8bDa1AB5eEad21547Ba0f33c07c86C5Dc48D9Baa',
    '0x8e9690E135005E415BD050B11768615DE43fe5f8',
    '0x96646936b91d6B9D7D0c47C496AfBF3D6ec7B6f8',
    '0x991aeafbe1B1C7ac8348DC623AE350768d0C65b3',
    '0x9c08C7a7a89cfD671c79eacdc6F07c1996277eD5',
    '0x9E7fD25Ad9D97F1e6716fa5bB04749A4621e892d',
    '0x9F19a375709BAF0E8e35C2c5c65aca676c4C7191',
    '0x9F1F16B025F703eE985B58cEd48dAf93daD2f7EF',
    '0x9F2b223dA9F3911698C9b90Ecdf3ffEe37DD54a8',
    '0xa02E4b3d18D4E6B8d18Ac421fBc3dfFF8933c40a',
    '0xa0488D89FB8D3085D83ad2426b94b9715cF02869',
    '0xa660ba113F9AABaeB4Bcd28A4a1705f4997d5432',
    '0xA6F548DF93de924d73be7D25dC02554c6bD66dB5',
    '0xA8D4433BAdAa1A35506804B43657B0694deA928d',
    '0xaac98EE71D4F8A156B6abaa6844Cdb7789d086CE',
    '0xad302e620FEDb60078B33514757335545ba05c6D',
    '0xB0401Ab1108BD26C85A07243dFDF09F4821D76a2',
    '0xB0fBa102A03703fe2c1Dd6300E7b431eAC60E4B6',
    '0xB2634e2BFab9664F603626afc3D270BE63c09adE',
    '0xB6b9B165C4AC3f5233A0CF413126C72Be28B468A',
    '0xb82A45ea7C6d7c90bD95e9e2aF13242538F2e269',
    '0xBb31b8EEBB9C71001562AE56Aa5751Af313e6d89',
    '0xC6A5032dC4bF638e15b4a66BC718ba7bA474FF73',
    '0xce16E7ed7654a3453E8FaF748f2c82E57069278f',
    '0xce66904B68f1f070332Cbc631DE7ee98B650b499',
    '0xd0E43C99C05271Fa9FDF82281d4d1831A47BE81f',
    '0xd16847480D6bc218048CD31Ad98b63CC34e5c2bF',
    '0xD208168d2A512240Eb82582205D94a0710BCe4E7',
    '0xd47c0734a0b5feFf3bB2FC8542Cd5B9751aFeEfB',
    '0xd57b0Ee9e080E3f6Aa0C30BAE98234359e97Ea98'
];
/* ========================================================================================================================================================================= */
// Function to get project balance:
export const get = async (wallet) => {
    let balance = [];
    balance.push(...(await getPoolBalances(wallet).catch((err) => { throw new WeaverError(chain, project, 'getPoolBalances()', err); })));
    return balance;
};
/* ========================================================================================================================================================================= */
// Function to get all pool balances:
export const getPoolBalances = async (wallet) => {
    let balances = [];
    // Balance Multicall Query:
    let multicallResults = await multicallOneMethodQuery(chain, pools, minABI, 'balanceOf', [wallet]);
    let promises = pools.map(pool => (async () => {
        let balanceResults = multicallResults[pool];
        if (balanceResults) {
            let balance = parseBN(balanceResults[0]);
            if (balance > 0) {
                let newToken = await addBalancerToken(chain, project, 'staked', pool, balance, wallet);
                balances.push(newToken);
            }
        }
    })());
    await Promise.all(promises);
    return balances;
};
